use ["downloader", "files", "forms", "functional", "http", "java", "json", "std", "types"]

include "includes/constants.own"
include "includes/config.own"
include "includes/gui.own"
include "includes/telegram_api.own"
include "includes/audiotagger.own"

isWorked = false
isStopped = true

config = new Config(CONFIG_PATH, ::pushLog)
config.check()

bot = new TelegramBot(config.botToken)

def processAudio(audio) {
fileId = audio["file_id"]
   performer = audio["performer"]
   title = audio["title"]
   size = audio["file_size"]
   duration = audio["duration"]
   //thumb = audio["thumb"]["file_id"] // PhotoSize
   def storeAudio(fileJson) {
      filePath = fileJson["result"]["file_path"]
      println fileJson["result"]
      ext = substring(filePath, lastIndexOf(filePath, "."))
      name = performer + " - " + title + ext
// todo: filtr name
      path = config.saveFolderPath + name
      logStr = sprintf(DOWNLOAD_AUDIO_TEMPLATE, name, size/MBYTES, duration)
      pushLog(logStr)
      progressBar.setIndeterminate(false)
      progressBar.setValue(0)
      downloader(bot.createFileUrl(filePath), path, ::downloadProgress)
      pushLog("Download done!")
      thumbPath = ""
      if default(audio["thumb"], "") != "" {
         pushLog("Downloading image..")
         // колбек для загрузки изображения
         def storeImage(fileJson) {
            filePath = fileJson["result"]["file_path"]
            fileSize = audio["thumb"]["file_size"]
            thumbWidth = audio["thumb"]["width"]
            thumbHeight = audio["thumb"]["height"]
            thumbPath = "./thumb"
            logStr = sprintf(DOWNLOAD_IMAGE_TEMPLATE, thumbPath, fileSize/MBYTES, thumbWidth, thumbHeight)
            pushLog(logStr)
            progressBar.setIndeterminate(false)
            progressBar.setValue(0)
            downloader(bot.createFileUrl(filePath), thumbPath, ::downloadProgress)
            pushLog("Download done!")
         }

         // загрузка изображения
         bot.getFile(audio["thumb"]["file_id"], ::storeImage)
      }
      writeTags(path, performer, title, thumbPath)
      if thumbPath != "" {
         delete(thumbPath)
      }
   }

   bot.getFile(fileId, ::storeAudio)
   pushLog("Done!")
   progressBar.setIndeterminate(true)
   echo (audio)
}

def waitingUpdates() {
   isStopped = false
   pushLog("Started. Waiting for updates...")
   while isWorked {
      state = try(::handleUpdates, ::handleException)
      if state == -1 {
         isWorked = false
         isStopped = true
         break
      }
      sleep(500)
   }
   config.save()
   isStopped = true
   progressBar.setIndeterminate(false)
   pushLog("Stopped waiting")
   startButton.setText("Start")
}

def handleUpdates() {
   bot.getUpdates(config.lastUpdateId+1, def(update) {
      //println update
      results = update["result"]
      for result : results {
         updateId = int(result["update_id"])
         if config.lastUpdateId < updateId {
            config.lastUpdateId = updateId
         }
         println config.lastUpdateId
         pushLog("Update: " + config.lastUpdateId)

         if default(result["message"]["chat"], "") != "" {
            chatUsername = toLowerCase(default(result["message"]["chat"]["username"], ""))
            if trim(chatUsername) != trim(toLowerCase(config.username)) {
               pushLog("Knok knok from " + chatUsername)
               return 0
            }
         }
         if default(result["message"]["audio"], "") != "" {
            //println result["message"]
            processAudio(result["message"]["audio"])
         } else {
            pushLog("No audio, text: " + default(result["message"]["text"], "null"))
         }
      }
   })
}

def handleException(type, message) {
   pushLog(sprintf(EXCEPTION_TEMPLATE, type, message))
   return -1
}

def updateTelegramBot() {
   bot.setToken(config.botToken)
}

