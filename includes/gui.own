waitingGaugeIndex = 0

startButton = newButton("Start")
configButton = newButton("Config")
aboutButton = newButton("About")
clearLogButton = newButton("Clear log")
saveConfigButton = newButton("Save")
cancelConfigButton = newButton("Cancel")

botTokenField = newTextField()
saveFolderPathField = newTextField()
usernameField = newTextField()

logTextArea = newTextArea("Program log\n")
aboutLabel = newLabel(ABOUT_TEXT)
botTokenLabel = newLabel("Bot token")
saveFolderPathLabel = newLabel("Save folder")
userNameLabel = newLabel("Your tg username")

progressBar = newProgressBar()
progressBar.setValue(100)

mainWindow = newWindow("AudioFold")
configWindow = newWindow("Config AudioFold")
aboutWindow = newWindow("About AudioFold")

mainWindow.addWindowListener(def(type, event) {
   if event.id == WindowEvent.WINDOW_CLOSING {
      config.save()
      isWorked = false
   }
})

// Init button callbacks
startButton.onClick(def () {
   if isWorked && !isStopped {
      isWorked = false
   } else {
      if !isStopped return 0 
      isWorked = true
      startButton.setText("Stop")
      progressBar.setIndeterminate(true)
      thread(::waitingUpdates)
   }
})

configButton.onClick(def () {
   if isWorked {
      isWorked = false
   }
   botTokenField.setText(config.botToken)
   saveFolderPathField.setText(config.saveFolderPath)
   usernameField.setText(config.username)
   configWindow.setVisible()
})

saveConfigButton.onClick(def () {
   config.set("botToken", trim(botTokenField.getText()))
   config.set("saveFolderPath", trim(saveFolderPathField.getText()))
   config.set("username", trim(usernameField.getText()))
   config.save()
   clearLog()
   updateTelegramBot()
   configWindow.dispose()
   config.check()
})

cancelConfigButton.onClick(def () {
   configWindow.dispose()
})

aboutButton.onClick(def () {
   aboutWindow.setVisible()
})

clearLogButton.onClick(def () {
   clearLog()
})

// Init buttonPanel
buttonPanel = newPanel()
buttonPanel.setLayout(boxLayout(buttonPanel, BoxLayout.LINE_AXIS))
buttonPanel.add(startButton)
buttonPanel.add(configButton)
buttonPanel.add(aboutButton)
buttonPanel.add(clearLogButton)

// Init buttonConfigPanel
buttonConfigPanel = newPanel()
buttonConfigPanel.setLayout(boxLayout(buttonConfigPanel, BoxLayout.LINE_AXIS))
buttonConfigPanel.add(saveConfigButton)
buttonConfigPanel.add(cancelConfigButton)

// Init fieldsConfigPanel
fieldsConfigPanel = newPanel()
fieldsConfigPanel.setLayout(boxLayout(fieldsConfigPanel, BoxLayout.Y_AXIS))
fieldsConfigPanel.add(botTokenLabel)
fieldsConfigPanel.add(botTokenField)
fieldsConfigPanel.add(saveFolderPathLabel)
fieldsConfigPanel.add(saveFolderPathField)
fieldsConfigPanel.add(userNameLabel)
fieldsConfigPanel.add(usernameField)

// Init statusPanel
statusPanel = newPanel()
statusPanel.setLayout(boxLayout(statusPanel, BoxLayout.X_AXIS))
statusPanel.add(progressBar)

// Init mainPanel
mainPanel = newPanel(borderLayout(HGAP, VGAP))
mainPanel.setPreferredSize(470, 400)
mainPanel.add(newScrollPane(logTextArea), BorderLayout.CENTER)
mainPanel.add(buttonPanel, BorderLayout.NORTH)
mainPanel.add(statusPanel, BorderLayout.SOUTH)

// Init configPanel
configPanel = newPanel(borderLayout(HGAP, VGAP))
configPanel.setPreferredSize(250, 300)
configPanel.add(fieldsConfigPanel, BorderLayout.NORTH)
configPanel.add(buttonConfigPanel, BorderLayout.SOUTH)

// Init aboutPanel
aboutPanel = newPanel(borderLayout(HGAP, VGAP))
aboutPanel.setPreferredSize(250, 300)
aboutPanel.add(aboutLabel, BorderLayout.CENTER)

// Init mainWindow
mainWindow.setMinimumSize(200, 220)
mainWindow.setLocationByPlatform()
mainWindow.add(mainPanel)
mainWindow.pack()
mainWindow.setVisible()

// Init configWindow
configWindow.setMinimumSize(200, 220)
configWindow.setLocationByPlatform()
configWindow.setDefaultCloseOperation(DISPOSE_ON_CLOSE)
configWindow.add(configPanel)
configWindow.pack()


// Init aboutWindow
aboutWindow.setMinimumSize(200, 220)
aboutWindow.setLocationByPlatform()
aboutWindow.setDefaultCloseOperation(DISPOSE_ON_CLOSE)
aboutWindow.add(aboutPanel)
aboutWindow.pack()

def pushLog(text) {
   logTextArea.setText(logTextArea.getText() + text + "\n")
}

def clearLog() {
   logTextArea.setText("Program log\n")
}

def downloadProgress(progress, bytesDownloaded, bytesMax) {
   progressBar.setValue(progress)
}