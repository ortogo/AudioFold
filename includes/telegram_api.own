def TelegramBot(token) {
    return {
        "token": token,
        "toParams": def(obj) {
            str = ""
            for k, v : obj
                str += k + "=" + v + "&"
            return str
        },
        "createFileUrl": def(bot, filePath) {
            return "https://api.telegram.org/file/bot" + bot.token + "/" + filePath
        },
        "getFile": def(bot, fileId, callback) {
            return bot.invokeJson(bot, "getFile", {"file_id":fileId}, callback)
        },
        "createRawUrl": def(bot, method, params) {
            return "https://api.telegram.org/bot" + bot.token + "/" + method + "?" + params + "access_token=" + bot.token
        },
        "createUrl": def(bot, method, params) {
            return bot.createRawUrl(bot, method, bot.toParams(params))
        },
        "invokeJson": def(bot, method, params, callback) {
            return http(bot.createUrl(bot, method, params), combine(::jsondecode, callback))
        },
        "invoke": def(bot, method, params, callback) {
            return http(bot.createUrl(bot, method, params), callback)
        },
        "sendMessage": def(bot, text = "", chatId = 1) {
            return bot.invoke("sendMessage", {
                "chat_id": chatId,
                "text": text
            }, ::echo)
        },
        "getUpdates": def(bot, offset, callback) {
            return bot.invokeJson(bot, "getUpdates", {"offset": offset}, callback)
        }
    }
}

